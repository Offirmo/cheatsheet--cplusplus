<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
	<title>Operator Precedence in C++</title>
	<link rel="stylesheet" type="text/css" href="Operator%20Precedence%20in%20C++_fichiers/styles.css">
	<!-- This ga snippet is a little differentm to accomodate sub-domains (but still generated by ga). -->
	<script src="Operator%20Precedence%20in%20C++_fichiers/ga.js" async="" type="text/javascript"></script><script type="text/javascript">

	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-8242349-10']);
	  _gaq.push(['_setDomainName', 'operator-precedence.com']);
	  _gaq.push(['_trackPageview']);

	  (function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();

	</script>
</head>
<body>
	<div id="main">
		<h1><a href="http://operator-precedence.com/">Operator Precedence</a> in C++</h1>
<p>
	The table below defines operator precedence (and associativity) in C++.
	Hover on any of the operators in the precedence table for further information.
</p>
<p>
	A bullet (<span class="operand">&#8226;</span>) represents the operand in unary versions of some operators, for disambiguation.
</p>
<table>
	<tbody><tr>
		<th title="Precedence Level (1=highest)">
			P.
		</th>
		<th colspan="2">
			Operators : <div class="cat1">Arithmetic</div>,
			<div class="cat2">Bitwise</div>,
			<div class="cat3">Logical</div>,
			<div class="cat4">Relational</div>,
			<div class="cat5">Pointer/Member</div> and
			<div class="cat6">Other</div>
		</th>
		<th title="Associativity">
			As.
		</th>
	</tr>

	<tr class="ltr">
		<td class="level">1</td>
		<td colspan="2">
			<!--<div class='cat6' title='Parentheses'>()</div>-->
			<div class="cat6" title="Unary scope resolution">::<span class="operand">&#8226;</span></div>
			<div class="cat6" title="Binary scope resolution">::</div>
		</td>
		<!--<td></td>-->
		<td rowspan="2" title="Left-to-right">LTR</td>
	</tr>
	
	<tr class="ltr">
		<td class="level">2</td>
		<td colspan="2">
			<div class="cat1" title="Post-increment"><span class="operand">&#8226;</span>++</div>
			<div class="cat1" title="Post-decrement"><span class="operand">&#8226;</span>--</div>
			<div class="cat5" title="Member selection">.</div>
			<div class="cat5" title="Member selection via pointer">-&gt;</div>
			<div class="cat5" title="Array subscript">[]</div>
			<div class="cat6" title="Function call">(<i>args</i>)</div>
			<div class="cat6" title="Run-time type information">typeid</div>
			<div class="cat6" title="Some type casting operators have been omitted. See note 1.">*_cast<...></div>
		</td>
		<!--<td></td>-->
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="rtl">
		<td class="level">3</td>
		<td colspan="2">
			<div class="cat1" title="Pre-increment">++<span class="operand">&#8226;</span></div>
			<div class="cat1" title="Pre-decrement">--<span class="operand">&#8226;</span></div>
			<div class="cat1" title="Unary plus">+<span class="operand">&#8226;</span></div>
			<div class="cat1" title="Unary minus">-<span class="operand">&#8226;</span></div>
			<div class="cat3" title="Logical NOT">!</div>
			<div class="cat2" title="Bitwise NOT">~</div>
			<div class="cat5" title="Indirection (dereference)">*<span class="operand">&#8226;</span></div>
			<div class="cat5" title="Address of">&amp;<span class="operand">&#8226;</span></div>
			<div class="cat6" title="Type cast">(<i>type</i>)</div>
			<div class="cat6" title="Size of">sizeof</div>
			<div class="cat6" title="Dynamic memory allocation">new</div>
			<div class="cat6" title="Dynamic memory deallocation">delete</div>
			<div class="cat6" title="Dynamic memory allocation for array">new[]</div>
			<div class="cat6" title="Dynamic memory deallocation for array">delete[]</div>
		</td>
		<td rowspan="1" title="Right-to-left">RTL</td>
	</tr>
	
	<tr class="ltr">
		<td class="level">4</td>
		<td colspan="2">
			<div class="cat5" title="Pointer to member">.*</div>
			<div class="cat5" title="Pointer to member via pointer">-&gt;*</div>
		</td>
		<!--<td></td>-->
		<td rowspan="11" title="Left-to-right">LTR</td>
	</tr>
	
	<tr class="ltr">
		<td class="level">5</td>
		<td>
			<div class="cat1" title="Multiplication">*</div>
			<div class="cat1" title="Division">/</div>
			<div class="cat1" title="Modulus">%</div>
		</td>
		<td rowspan="2">Arithmetic</td>
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">6</td>
		<td>
			<div class="cat1" title="Addition">+</div>
			<div class="cat1" title="Subtraction">-</div>
		</td>
		<!--<td>Arithmetic</td>-->
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">7</td>
		<td>
			<div class="cat2" title="Bitwise left shift">&lt;&lt;</div>
			<div class="cat2" title="Bitwise right shift">&gt;&gt;</div>
		</td>
		<td>Bitwise shift</td>
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">8</td>
		<td>
			<div class="cat4" title="Less than">&lt;</div>
			<div class="cat4" title="Less than or equal to">&lt;=</div>
			<div class="cat4" title="Greater than">&gt;</div>
			<div class="cat4" title="Greater than or equal to">&gt;=</div>
		</td>
		<td rowspan="2">Relational</td>
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">9</td>
		<td>
			<div class="cat4" title="Equal to">==</div>
			<div class="cat4" title="Not equal to">!=</div>
		</td>
		<!--<td>Relational</td>-->
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">10</td>
		<td>
			<div class="cat2" title="Bitwise AND">&amp;</div>
		</td>
		<td rowspan="3">Bitwise</td>
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">11</td>
		<td>
			<div class="cat2" title="Bitwise XOR">^</div>
		</td>
		<!--<td>Bitwise</td>-->
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">12</td>
		<td>
			<div class="cat2" title="Bitwise OR">|</div>
		</td>
		<!--<td>Bitwise</td>-->
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">13</td>
		<td>
			<div class="cat3" title="Logical AND">&amp;&amp;</div>
		</td>
		<td rowspan="2">Logical</td>
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="ltr">
		<td class="level">14</td>
		<td>
			<div class="cat3" title="Logical OR">||</div>
		</td>
		<!--<td>Logical</td>-->
		<!--<td title='Left-to-right'>LTR</td>-->
	</tr>
	
	<tr class="rtl">
		<td class="level">15</td>
		<td>
			<div class="cat6" title="Ternary conditional">? :<small>(ternary)</small></div>
<!--		</td> THIS COMMENTING IS A FIX ACCORDING TO http://en.cppreference.com/w/Talk:cpp/language/operator_precedence
		<td rowspan=1>Conditional</td>
		<td title='Right-to-left'>RTL</td>
	</tr>
	
	<tr class='rtl'>
		//<td class='level'>15</td> was already commented out, but can't nest comments
		<td>-->
			<div class="cat6" title="Assignment">=</div>
			<div class="cat1" title="Multiplication assignment">*=</div>
			<div class="cat1" title="Division assignment">/=</div>
			<div class="cat1" title="Modulus assignment">%=</div>
			<div class="cat1" title="Addition assignment">+=</div>
			<div class="cat1" title="Subtraction assignment">-=</div>
			<div class="cat2" title="Bitwise left shift assignment">&lt;&lt;=</div>
			<div class="cat2" title="Bitwise right shift assignment">&gt;&gt;=</div>
			<div class="cat2" title="Bitwise AND assignment">&amp;=</div>
			<div class="cat2" title="Bitwise XOR assignment">^=</div>
			<div class="cat2" title="Bitwise OR assignment">|=</div>
		</td>
		<td rowspan="1">Conditional and Assignment</td>
		<td title="Right-to-left">RTL</td>
	</tr>
	
	<tr class="ana">
		<td class="level">16</td>
		<td colspan="2">
			<div class="cat6" title="Exception raising">throw</div>
		</td>
		<!--<td></td>-->
		<td title="Not applicable">N/A</td>
	</tr>
	
	<tr class="ltr">
		<td class="level">17</td>
		<td colspan="2">
			<div class="cat6" title="Comma. Returns the 2nd operand, but only after evaluating (and discarding the result of) the first operand.">,</div>
		</td>
		<!--<td></td>-->
		<td rowspan="1" title="Left-to-right">LTR</td>
	</tr>

</tbody></table>

<p class="tableFootnote" id="omittedLevel2Ops">
	Note 1: The following operators were omitted for brevity. They belong to precedence level 2.
</p>
<div class="rightAligner">
	<div class="cat6" title="Type cast with run-time check">dynamic_cast</div>
	<div class="cat6" title="Type cast with only compile-time check">static_cast</div>
	<div class="cat6" title="Casts away &quot;constness&quot;">const_cast</div>
	<div class="cat6" title="Type cast with no checks">reinterpret_cast</div>
</div>
<p class="tableFootnote" id="ternaryPrecedenceNote">
	Note 2: Contrary to many sources, this is indeed the correct precedence and associativity for the ternary operator. See <a href="http://operator-precedence.com/?page=cppTernary">this</a>.
</p>
<p>C++ not your language? <a href="http://operator-precedence.com/">Select a different programming language.</a></p>
		<p>Questions, comments ==&gt; info (at) (this domain).</p>
	</div>

</body></html>